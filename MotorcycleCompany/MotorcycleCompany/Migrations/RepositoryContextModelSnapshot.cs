// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace MotorcycleCompany.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Agency", b =>
                {
                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("AgencyId");

                    b.ToTable("Agency");

                    b.HasData(
                        new
                        {
                            AgencyId = new Guid("d5fb6bd2-86c7-4f22-a825-6f3c70b89c72"),
                            Address = "Calle del recuerdo",
                            Location = "Usaquen",
                            Name = "Agencia01",
                            Neighborhood = "Santa Barbara"
                        },
                        new
                        {
                            AgencyId = new Guid("3eadac48-b832-49a5-888b-ad121f3ee0ff"),
                            Address = "Calle de la soledad",
                            Location = "Usaquen",
                            Name = "Agencia02",
                            Neighborhood = "Santa Ana"
                        });
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int?>("Inhabitants")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("CityId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("E_Mail")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)")
                        .HasColumnName("E-Mail");

                    b.Property<string>("FistName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("TypeId")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("ClientId");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            ClientId = new Guid("b99adb00-c777-4c55-a3a7-276ec9c99343"),
                            Address = "La calle del ocio",
                            E_Mail = "german.alarcon@misena.edu.co",
                            FistName = "German Gilberto",
                            LastName = "Alarcon R",
                            Number = "79802910",
                            Phone = "3153666036",
                            TypeId = "CC"
                        },
                        new
                        {
                            ClientId = new Guid("63fe095b-7e00-4948-9849-73a4f4117eab"),
                            Address = "La calle de la Melancolia",
                            E_Mail = "ana.yaqueline@misena.edu.co",
                            FistName = "Ana Yaqueline",
                            LastName = "Chavarro",
                            Number = "79802911",
                            Phone = "3153666037",
                            TypeId = "CC"
                        });
                });

            modelBuilder.Entity("Entities.Models.Garage", b =>
                {
                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("GarageId", "Address");

                    b.HasIndex("CityId");

                    b.ToTable("Garage");
                });

            modelBuilder.Entity("Entities.Models.Motorcycle", b =>
                {
                    b.Property<string>("MotorcycleId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("Chassis")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("date");

                    b.Property<Guid>("GarageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MotorcycleId");

                    b.HasIndex("GarageId", "Address");

                    b.ToTable("Motorcycle");
                });

            modelBuilder.Entity("Entities.Models.Phone", b =>
                {
                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("AgencyId", "PhoneId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Entities.Models.Rent", b =>
                {
                    b.Property<Guid>("RentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MotorcycleId")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AgencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Paid")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.HasKey("RentId", "MotorcycleId", "ClientId", "AgencyId");

                    b.HasIndex("AgencyId");

                    b.HasIndex("ClientId");

                    b.HasIndex("MotorcycleId");

                    b.ToTable("Rent");
                });

            modelBuilder.Entity("Entities.Models.Garage", b =>
                {
                    b.HasOne("Entities.Models.City", "City")
                        .WithMany("Garages")
                        .HasForeignKey("CityId")
                        .IsRequired()
                        .HasConstraintName("FK_Garage_City");

                    b.Navigation("City");
                });

            modelBuilder.Entity("Entities.Models.Motorcycle", b =>
                {
                    b.HasOne("Entities.Models.Garage", "Garage")
                        .WithMany("Motorcycles")
                        .HasForeignKey("GarageId", "Address")
                        .IsRequired()
                        .HasConstraintName("FK_Motorcycle_Garage");

                    b.Navigation("Garage");
                });

            modelBuilder.Entity("Entities.Models.Phone", b =>
                {
                    b.HasOne("Entities.Models.Agency", "Agency")
                        .WithMany("Phones")
                        .HasForeignKey("AgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Phone_Agency");

                    b.Navigation("Agency");
                });

            modelBuilder.Entity("Entities.Models.Rent", b =>
                {
                    b.HasOne("Entities.Models.Agency", "Agency")
                        .WithMany("Rents")
                        .HasForeignKey("AgencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Rent_Agency");

                    b.HasOne("Entities.Models.Client", "Client")
                        .WithMany("Rents")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("FK_Rent_Client");

                    b.HasOne("Entities.Models.Motorcycle", "Motorcycle")
                        .WithMany("Rents")
                        .HasForeignKey("MotorcycleId")
                        .IsRequired()
                        .HasConstraintName("FK_Rent_Motorcycle");

                    b.Navigation("Agency");

                    b.Navigation("Client");

                    b.Navigation("Motorcycle");
                });

            modelBuilder.Entity("Entities.Models.Agency", b =>
                {
                    b.Navigation("Phones");

                    b.Navigation("Rents");
                });

            modelBuilder.Entity("Entities.Models.City", b =>
                {
                    b.Navigation("Garages");
                });

            modelBuilder.Entity("Entities.Models.Client", b =>
                {
                    b.Navigation("Rents");
                });

            modelBuilder.Entity("Entities.Models.Garage", b =>
                {
                    b.Navigation("Motorcycles");
                });

            modelBuilder.Entity("Entities.Models.Motorcycle", b =>
                {
                    b.Navigation("Rents");
                });
#pragma warning restore 612, 618
        }
    }
}
